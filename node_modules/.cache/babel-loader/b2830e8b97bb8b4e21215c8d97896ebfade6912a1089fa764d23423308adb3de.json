{"ast":null,"code":"var _jsxFileName = \"/Users/adarshchaturvedi/Desktop/untitled folder/Trello_taskmanagement/src/components/Tasks.jsx\",\n  _s = $RefreshSig$();\n// Tasks.jsx\nimport React, { useState } from \"react\";\nimport Task from \"./Task\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask, deleteTask, editTask } from \"../redux/todoSlice\";\nimport toast, { Toaster } from \"react-hot-toast\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tasks = ({\n  todoList\n}) => {\n  _s();\n  var _todoList$id;\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n  const handleAddTask = async e => {\n    e.preventDefault();\n    if (message.length === 0) return toast.error(\"Message cannot be empty\");\n    try {\n      const data = {\n        cardId: todoList.id,\n        message: message\n      };\n      dispatch(addTask(data));\n      setMessage(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const handleDeleteTask = async taskId => {\n    dispatch(deleteTask({\n      cardId: todoList === null || todoList === void 0 ? void 0 : todoList.id,\n      id: taskId\n    }));\n  };\n  const [openModel, setOpenModel] = useState(false);\n  const handleEditTask = async (taskId, newMessage) => {\n    dispatch(editTask({\n      cardId: todoList === null || todoList === void 0 ? void 0 : todoList.id,\n      id: taskId,\n      newMessage\n    }));\n    setOpenModel(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Droppable, {\n      droppableId: todoList === null || todoList === void 0 ? void 0 : (_todoList$id = todoList.id) === null || _todoList$id === void 0 ? void 0 : _todoList$id.toString(),\n      children: provided => {\n        var _todoList$tasks;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          ...provided.droppableProps,\n          ref: provided.innerRef,\n          children: [todoList === null || todoList === void 0 ? void 0 : (_todoList$tasks = todoList.tasks) === null || _todoList$tasks === void 0 ? void 0 : _todoList$tasks.map(({\n            id,\n            title,\n            date\n          }, index) => /*#__PURE__*/_jsxDEV(Draggable, {\n            index: index,\n            draggableId: id.toString(),\n            children: provided => /*#__PURE__*/_jsxDEV(\"div\", {\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              ref: provided.innerRef,\n              children: /*#__PURE__*/_jsxDEV(Task, {\n                handleDeleteTask: handleDeleteTask,\n                handleEditTask: handleEditTask,\n                taskId: id,\n                taskTitle: title,\n                taskDate: date,\n                openModel: openModel,\n                setOpenModel: setOpenModel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this)\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleAddTask,\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"addTask\",\n        rows: \"3\",\n        value: message,\n        onChange: e => setMessage(e.target.value),\n        placeholder: \"Add a Task\",\n        className: \"w-full p-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"mt-2 px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600 transition-colors\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Tasks, \"dUs2JQuexY0VXyHUQPJ9P1m8uiQ=\", false, function () {\n  return [useDispatch];\n});\n_c = Tasks;\nexport default Tasks;\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useState","Task","Draggable","Droppable","useDispatch","addTask","deleteTask","editTask","toast","Toaster","jsxDEV","_jsxDEV","Tasks","todoList","_s","_todoList$id","dispatch","message","setMessage","handleAddTask","e","preventDefault","length","error","data","cardId","id","console","log","handleDeleteTask","taskId","openModel","setOpenModel","handleEditTask","newMessage","children","droppableId","toString","provided","_todoList$tasks","droppableProps","ref","innerRef","tasks","map","title","date","index","draggableId","draggableProps","dragHandleProps","taskTitle","taskDate","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onSubmit","className","rows","value","onChange","target","_c","$RefreshReg$"],"sources":["/Users/adarshchaturvedi/Desktop/untitled folder/Trello_taskmanagement/src/components/Tasks.jsx"],"sourcesContent":["// Tasks.jsx\nimport React, { useState } from \"react\";\nimport Task from \"./Task\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\nimport { useDispatch } from \"react-redux\";\nimport { addTask, deleteTask, editTask } from \"../redux/todoSlice\";\nimport toast, { Toaster } from \"react-hot-toast\";\n\nconst Tasks = ({ todoList }) => {\n  const dispatch = useDispatch();\n  const [message, setMessage] = useState(\"\");\n\n  const handleAddTask = async (e) => {\n    e.preventDefault();\n\n    if (message.length === 0) return toast.error(\"Message cannot be empty\");\n\n    try {\n      const data = { cardId: todoList.id, message: message };\n      dispatch(addTask(data));\n      setMessage(\"\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const handleDeleteTask = async (taskId) => {\n    dispatch(deleteTask({ cardId: todoList?.id, id: taskId }));\n  };\n\n  const [openModel, setOpenModel] = useState(false);\n\n  const handleEditTask = async (taskId, newMessage) => {\n    dispatch(editTask({ cardId: todoList?.id, id: taskId, newMessage }));\n    setOpenModel(false);\n  };\n\n  return (\n    <div>\n      <Droppable droppableId={todoList?.id?.toString()}>\n        {(provided) => (\n          <div {...provided.droppableProps} ref={provided.innerRef}>\n            {todoList?.tasks?.map(({ id, title, date }, index) => (\n              <Draggable\n                key={id}\n                index={index}\n                draggableId={id.toString()}\n              >\n                {(provided) => (\n                  <div\n                    {...provided.draggableProps}\n                    {...provided.dragHandleProps}\n                    ref={provided.innerRef}\n                  >\n                    <Task\n                      handleDeleteTask={handleDeleteTask}\n                      handleEditTask={handleEditTask}\n                      taskId={id}\n                      taskTitle={title}\n                      taskDate={date}\n                      openModel={openModel}\n                      setOpenModel={setOpenModel}\n                    />\n                  </div>\n                )}\n              </Draggable>\n            ))}\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n\n      <form onSubmit={handleAddTask} className=\"mt-4\">\n        <textarea\n          id=\"addTask\"\n          rows=\"3\"\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder=\"Add a Task\"\n          className=\"w-full p-2 rounded-md border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400\"\n        />\n        <button className=\"mt-2 px-4 py-2 rounded-md bg-blue-500 text-white hover:bg-blue-600 transition-colors\">\n          Submit\n        </button>\n      </form>\n      <Toaster />\n    </div>\n  );\n};\n\nexport default Tasks;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}